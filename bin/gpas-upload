#!/usr/bin/env python3

"""
gpas-uploader script
"""

import argparse, shutil
from pathlib import Path
import sys

import gpas_uploader

parser = argparse.ArgumentParser(description="GPAS batch upload tool")
parser.add_argument("--parallel", action="store_true", default=False)
subparsers = parser.add_subparsers(dest="command")

validate_args = subparsers.add_parser(
    "validate", help="parse and validate an upload CSV"
)
validate_args.add_argument("samplesheet")

import_args = subparsers.add_parser("decontaminate")
import_args.add_argument("--dir", default='/tmp/')
import_args.add_argument("--output_csv", default='sample_names.csv', help='the name of the CSV to store the local->GPAS (batch,run,sample) lookup table')
import_args.add_argument("samplesheet")

if __name__ == "__main__":

    args = parser.parse_args()

    if args.command == "validate":

        samplesheet = Path(args.samplesheet)

        upload_csv = gpas_uploader.Batch(samplesheet, run_parallel=args.parallel)

        print(upload_csv.validation_json)

        sys.stdout.flush()

    elif args.command == "decontaminate":

        samplesheet = Path(args.samplesheet)

        upload_csv = gpas_uploader.Batch(samplesheet, run_parallel=args.parallel)

        if upload_csv.valid:

            parent = Path(args.samplesheet).resolve().parent
            outdir = Path(args.dir).resolve()

            # run ReadItAndKeep on all the samples
            upload_csv.decontaminate(outdir=outdir)

            print(upload_csv.decontamination_json)

            sys.stdout.flush()

            # to avoid overwriting a sample_names.csv, rename any existing
            # file to sample_names.csv.001. If that also exists, instead rename
            # to sample_names.csv.002, if that already exists sample_names.csv.003
            # and so on

            # if a sample_names.csv already exists
            if Path(parent / args.output_csv).exists():

                # find out how many backup files there are
                backup_files = parent.glob(args.output_csv + '.*')

                if len(list(backup_files)) == 0:

                    shutil.move(parent / args.output_csv, str(parent / args.output_csv) + '.001')

                else:

                    backup_files = parent.glob(args.output_csv + '.*')

                    # create a list of their numbers
                    file_numbers = [ str(i).split(args.output_csv + '.')[1] for i in backup_files ]

                    # what is the highest number?
                    highest_value = int(max(file_numbers))

                    # hence what is the new number?
                    next_value = "%03i" % (highest_value+1)

                    shutil.move(parent / args.output_csv, str(parent / args.output_csv) + '.' + next_value)

            # save the local -> GPAS (batch,run,sample) information
            upload_csv.sample_sheet.to_csv(parent / args.output_csv, index=False)
