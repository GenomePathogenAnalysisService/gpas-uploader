#!/usr/bin/env python3

"""
gpas-uploader script
"""

import argparse
from pathlib import Path
import sys

import gpas_uploader

parser = argparse.ArgumentParser(description="GPAS sequencing data upload tool")
parser.add_argument("--parallel", action="store_true", default=False)
subparsers = parser.add_subparsers(dest="command")

validate_args = subparsers.add_parser(
    "validate", help="parse and validate a samplesheet"
)
validate_args.add_argument("samplesheet")
validate_args.add_argument("--dir", default=None, help="override fastq file prefix")

import_args = subparsers.add_parser("decontaminate")
import_args.add_argument("--dir", default='/tmp/')
import_args.add_argument("--output_csv", default='sample_names.csv', help='the name of the CSV to store the local->GPAS (batch,run,sample) lookup table')
import_args.add_argument("samplesheet")

if __name__ == "__main__":

    args = parser.parse_args()

    if args.command == "validate":

        samplesheet = Path(args.samplesheet)

        upload_csv = gpas_uploader.Samplesheet(samplesheet, run_parallel=args.parallel)

        upload_csv.validate()

        print(upload_csv.validation_json)

        sys.stdout.flush()

    elif args.command == "decontaminate":

        samplesheet = Path(args.samplesheet)

        upload_csv = gpas_uploader.Samplesheet(samplesheet, run_parallel=args.parallel)

        if upload_csv.validate():

            parent = Path(args.samplesheet).resolve().parent
            outdir = Path(args.dir).resolve()

            # run ReadItAndKeep on all the samples
            upload_csv.decontaminate()

            print(upload_csv.make_submission())

            sys.stdout.flush()

            # save the local -> GPAS (batch,run,sample) information
            upload_csv.samples.to_csv(args.output_csv, index=False)
