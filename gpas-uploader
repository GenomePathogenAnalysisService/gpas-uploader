#!/usr/bin/env python3
"""
gpas-uploaded script
"""

import argparse
from pathlib import Path
from error import *
import sys
import json
import validate
from cleanreads import Decontamination

parser = argparse.ArgumentParser(description="gpas sequencing data upload tool")
parser.add_argument("--json", action="store_true", default=False)
subparsers = parser.add_subparsers(dest="command")

validate_args = subparsers.add_parser(
    "validate", help="parse and validate a samplesheet"
)
validate_args.add_argument("samplesheet")
validate_args.add_argument("--dir", default=None, help="override fastq file prefix")

import_args = subparsers.add_parser("import", help="Prepare a batch for submission")
import_args.add_argument("samplesheet")

if __name__ == "__main__":
    args = parser.parse_args()

    if args.command == "validate":
        # validation stage
        try:
            samplesheet = Path(args.samplesheet)
        except:
            emsg("missing-file", json=args.json)
            exit(1)
        try:
            validation = validate.Samplesheet(samplesheet).to_json()
        except GpasError:
            errors = []
            verr(errors, json=args.json)
            exit(1)

        print(validation, file=sys.stderr)
        smsg(validation, json=args.json)

    elif args.command == "import":
        validation = None
        if args.json:
            validation = json.load(open(args.samplesheet))["submission"]
        else:
            validation = validate.Samplesheet(args.samplesheet)
            smsg(validation, json=args.json)

        for sample in validation["samples"]:
            cr = Decontamination(sample["fastq1"], sample["fastq2"])
            dmsg(sample, "started", json=args.json)

            if cr.result() != 0:
                derr(sample, cr.error, json=args.json)
            else:
                dmsg(sample, "completed", json=args.json)
    else:
        exit(1)
    exit(0)
