#!/usr/bin/env python3
"""
gpas-uploaded script
"""

import argparse
from pathlib import Path
from error import GpasError, emsg, vmsg, dmsg
import cleanreads
import validate

parser = argparse.ArgumentParser(description="gpas sequencing data upload tool")
parser.add_argument("--json", action="store_true", default=False)
subparsers = parser.add_subparsers(dest="command")

validate_args = subparsers.add_parser(
    "validate", help="parse and validate a samplesheet"
)
validate_args.add_argument("samplesheet")
validate_args.add_argument("--dir", default=None, help="override fastq file prefix")

prepare_args = subparsers.add_parser("prepare", help="Prepare a batch for submission")
prepare_args.add_argument("samplesheet")

if __name__ == "__main__":
    args = parser.parse_args()

    if args.command == "validate":
        # validation stage
        try:
            samplesheet = Path(args.samplesheet)
        except:
            emsg("missing-file", json=args.json)
            exit(1)
        validation = validate.Samplesheet(samplesheet)

        vmsg(validation, json=args.json)

    elif args.command == "prepare":
        validation = None
        if args.json:
            validation = None
        else:
            validation = validate.Samplesheet(args.samplesheet)

        for sample in validation:
            cr = Decontaminate(sample["fastq1"], sample["fastq2"])
            dmsg(sample, "started", json=args.json)

            if cr.result() != 0:
                dmsg(sample, "error", json=args.json)
            else:
                dmsg(sample, "complete", json=args.json)
    else:
        exit(1)
